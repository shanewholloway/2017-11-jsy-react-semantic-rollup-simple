import {promisify} from 'util'
import * as fs from 'fs'
const readFile = promisify @ fs.readFile

import * as path from 'path'
import express from 'express'
import expressStaticGzip from 'express-static-gzip'
import chokidar from 'chokidar'

import asJSONServerSentEvents from './sse'

export const api = express()


const rx_data_live = /data-live-([a-z-]+)=(?:'([^']+)'|"([^"]+)")/g
api.engine @ 'html', substitute_data_live

async function substitute_data_live(filePath, locals, callback) ::
  try ::
    const src = await readFile @ filePath, 'utf-8'
    const res = src.replace @ rx_data_live,
      (m, attr, val_a, val_b) => ::
        const key = path.relative @ webroot,
          path.join @ webroot, val_a || val_b
        const tgt = live_info.development[key]
        return `${attr}='${tgt}' data-live='${attr} ${key}'`

    callback(null, res)
  catch err ::
    callback(err)

api.set @ 'view engine', 'html'
api.set @ 'views', `${__dirname}/views`

api.get @ `/__live__`, (req, res) => ::
  asJSONServerSentEvents(res, live_subscriptions)

api.get @ '/', (req, res) => res.render('index')
api.get @ '/index.html', (req, res) => res.render('index')

const webroot = path.join @ __dirname, 'public'
api.use @ '/', expressStaticGzip(webroot)

const live_subscriptions = new Set()
function live_sendChange(obj) ::
  console.log @ 'send live change', live_subscriptions.size, obj
  for const sendChange of live_subscriptions.values() ::
    sendChange(obj)


const live_info = @: production: {}, development: {}

async function updateWatchedLnk(fname) ::
  const filePath = path.join(webroot, fname)
  const key = path.relative @ webroot, filePath.replace(/.lnk$/, '')
  const tgt = path.join @ path.dirname(key), await readFile @ filePath, 'utf-8'

  const minified = fname.includes('.min.')
  if minified ::
    live_info.production[key] = tgt

  else if tgt != live_info.development[key] ::
    live_info.development[key] = tgt
    live_sendChange @ live_info.development

chokidar
  .watch @ ['*.lnk'], @: cwd: webroot
  .on @ 'add', updateWatchedLnk
  .on @ 'change', updateWatchedLnk

